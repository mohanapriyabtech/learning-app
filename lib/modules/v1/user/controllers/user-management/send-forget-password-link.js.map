{"version":3,"file":"send-forget-password-link.js","names":["_mailContent","_interopRequireDefault","require","_responseHandler","_userModel","_sendVerificationLink","SendForgotPasswordLink","_classCallCheck2","default","_createClass2","key","value","_update","_asyncToGenerator2","_regenerator","mark","_callee","req","res","user","updates","wrap","_callee$","_context","prev","next","User","findOne","email","query","exec","sent","abrupt","responseHandler","errorResponse","setToken","mailContent","forgetPassword","successResponse","t0","stop","update","_x","_x2","apply","arguments","_default","exports"],"sources":["../../../../../../src/modules/v1/user/controllers/user-management/send-forget-password-link.js"],"sourcesContent":["import mailContent from \"../../../../../utils/mail-content\";\nimport { responseHandler } from \"../../../../../utils/response-handler\";\nimport { User } from \"../../models/user-model\";\nimport { setToken } from \"./send-verification-link\";\n\n\nclass SendForgotPasswordLink {\n\n    constructor() {\n    }\n\n    /**\n     * @description   API for Password Reset Token Link send thorugh Email \n     * @param {*} req /api/v1/user/password-reset-link-mail\n     * @param {*} res \n     */\n\n    async update(req, res) {\n\n        try {\n\n            const user = await User.findOne({ email: req.query.email }).exec()\n            if (!user) return responseHandler.errorResponse(res, {}, \"Email not found\", 400);\n            const updates = await setToken(user.email)\n            // send email \n            await mailContent.forgetPassword(updates)\n            if (updates) {\n                return responseHandler.successResponse(res, {}, \"Verification sent successfully\", 200);\n            } else {\n                return responseHandler.errorResponse(res, {}, \"Failed to send verification mail\", 400);\n            }\n        }\n\n        catch (err) {\n            return responseHandler.errorResponse(res, err);\n        }\n\n    }\n}\n\nexport default new SendForgotPasswordLink();\n\n\n"],"mappings":";;;;;;;;;;;AAAA,IAAAA,YAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,gBAAA,GAAAD,OAAA;AACA,IAAAE,UAAA,GAAAF,OAAA;AACA,IAAAG,qBAAA,GAAAH,OAAA;AAAoD,IAG9CI,sBAAsB;EAExB,SAAAA,uBAAA,EAAc;IAAA,IAAAC,gBAAA,CAAAC,OAAA,QAAAF,sBAAA;EACd;;EAEA;AACJ;AACA;AACA;AACA;EAJI,IAAAG,aAAA,CAAAD,OAAA,EAAAF,sBAAA;IAAAI,GAAA;IAAAC,KAAA;MAAA,IAAAC,OAAA,OAAAC,kBAAA,CAAAL,OAAA,gBAAAM,YAAA,CAAAN,OAAA,CAAAO,IAAA,CAMA,SAAAC,QAAaC,GAAG,EAAEC,GAAG;QAAA,IAAAC,IAAA,EAAAC,OAAA;QAAA,OAAAN,YAAA,CAAAN,OAAA,CAAAa,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAIMC,eAAI,CAACC,OAAO,CAAC;gBAAEC,KAAK,EAAEX,GAAG,CAACY,KAAK,CAACD;cAAM,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC;YAAA;cAA5DX,IAAI,GAAAI,QAAA,CAAAQ,IAAA;cAAA,IACLZ,IAAI;gBAAAI,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,OAAAF,QAAA,CAAAS,MAAA,WAASC,gCAAe,CAACC,aAAa,CAAChB,GAAG,EAAE,CAAC,CAAC,EAAE,iBAAiB,EAAE,GAAG,CAAC;YAAA;cAAAK,QAAA,CAAAE,IAAA;cAAA,OAC1D,IAAAU,8BAAQ,EAAChB,IAAI,CAACS,KAAK,CAAC;YAAA;cAApCR,OAAO,GAAAG,QAAA,CAAAQ,IAAA;cAAAR,QAAA,CAAAE,IAAA;cAAA,OAEPW,oBAAW,CAACC,cAAc,CAACjB,OAAO,CAAC;YAAA;cAAA,KACrCA,OAAO;gBAAAG,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,OAAAF,QAAA,CAAAS,MAAA,WACAC,gCAAe,CAACK,eAAe,CAACpB,GAAG,EAAE,CAAC,CAAC,EAAE,gCAAgC,EAAE,GAAG,CAAC;YAAA;cAAA,OAAAK,QAAA,CAAAS,MAAA,WAE/EC,gCAAe,CAACC,aAAa,CAAChB,GAAG,EAAE,CAAC,CAAC,EAAE,kCAAkC,EAAE,GAAG,CAAC;YAAA;cAAAK,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAgB,EAAA,GAAAhB,QAAA;cAAA,OAAAA,QAAA,CAAAS,MAAA,WAKnFC,gCAAe,CAACC,aAAa,CAAChB,GAAG,EAAAK,QAAA,CAAAgB,EAAK,CAAC;YAAA;YAAA;cAAA,OAAAhB,QAAA,CAAAiB,IAAA;UAAA;QAAA,GAAAxB,OAAA;MAAA,CAGrD;MAAA,SAAAyB,OAAAC,EAAA,EAAAC,GAAA;QAAA,OAAA/B,OAAA,CAAAgC,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAJ,MAAA;IAAA;EAAA;EAAA,OAAAnC,sBAAA;AAAA;AAAA,IAAAwC,QAAA,GAAAC,OAAA,CAAAvC,OAAA,GAGU,IAAIF,sBAAsB,CAAC,CAAC"}