{"version":3,"file":"reset-password.js","names":["_encrypt","require","_mailContent","_interopRequireDefault","_responseHandler","_userModel","ResetUserPasswordController","_classCallCheck2","default","_createClass2","key","value","_update","_asyncToGenerator2","_regenerator","mark","_callee","req","res","result","wrap","_callee$","_context","prev","next","User","findOneAndUpdate","_id","params","id","reset_token","body","token","token_expires","$gt","Date","now","$unset","password","encrypt","new","sent","mailContent","abrupt","responseHandler","successResponse","errorResponse","t0","stop","update","_x","_x2","apply","arguments","_default","exports"],"sources":["../../../../../../src/modules/v1/user/controllers/user-management/reset-password.js"],"sourcesContent":["import { encrypt } from \"../../../../../utils/encrypt\";\nimport mailContent from \"../../../../../utils/mail-content\";\nimport { responseHandler } from \"../../../../../utils/response-handler\";\nimport { User } from \"../../models/user-model\";\n\n\n\nclass ResetUserPasswordController {\n\n    constructor() {\n    }\n\n    /**\n      * @description   api to update user \n      * @param {*} req /api/v1/user/update\n      * @param {*} res \n      */\n\n    async update(req, res) {\n\n        try {\n            // check the reset token expiration\n            const result = await User.findOneAndUpdate({ _id: req.params.id, reset_token: req.body.token, token_expires: { $gt: Date.now() } }, { $unset: { reset_token: 1, token_expires: 1 }, password: encrypt(req.body.password) }, { new: true })\n            if (result) {\n                mailContent\n                return responseHandler.successResponse(res, result, \"User email verified\", 200);\n            } else {\n                return responseHandler.errorResponse(res, {}, 'Password reset token is invalid or has expired.', 400);\n            }\n        }\n        catch (err) {\n            return responseHandler.errorResponse(res, err);\n        }\n\n    }\n}\n\nexport default new ResetUserPasswordController();\n\n"],"mappings":";;;;;;;;;;;AAAA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,YAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,gBAAA,GAAAH,OAAA;AACA,IAAAI,UAAA,GAAAJ,OAAA;AAA+C,IAIzCK,2BAA2B;EAE7B,SAAAA,4BAAA,EAAc;IAAA,IAAAC,gBAAA,CAAAC,OAAA,QAAAF,2BAAA;EACd;;EAEA;AACJ;AACA;AACA;AACA;EAJI,IAAAG,aAAA,CAAAD,OAAA,EAAAF,2BAAA;IAAAI,GAAA;IAAAC,KAAA;MAAA,IAAAC,OAAA,OAAAC,kBAAA,CAAAL,OAAA,gBAAAM,YAAA,CAAAN,OAAA,CAAAO,IAAA,CAMA,SAAAC,QAAaC,GAAG,EAAEC,GAAG;QAAA,IAAAC,MAAA;QAAA,OAAAL,YAAA,CAAAN,OAAA,CAAAY,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAIQC,eAAI,CAACC,gBAAgB,CAAC;gBAAEC,GAAG,EAAEV,GAAG,CAACW,MAAM,CAACC,EAAE;gBAAEC,WAAW,EAAEb,GAAG,CAACc,IAAI,CAACC,KAAK;gBAAEC,aAAa,EAAE;kBAAEC,GAAG,EAAEC,IAAI,CAACC,GAAG,CAAC;gBAAE;cAAE,CAAC,EAAE;gBAAEC,MAAM,EAAE;kBAAEP,WAAW,EAAE,CAAC;kBAAEG,aAAa,EAAE;gBAAE,CAAC;gBAAEK,QAAQ,EAAE,IAAAC,gBAAO,EAACtB,GAAG,CAACc,IAAI,CAACO,QAAQ;cAAE,CAAC,EAAE;gBAAEE,GAAG,EAAE;cAAK,CAAC,CAAC;YAAA;cAApOrB,MAAM,GAAAG,QAAA,CAAAmB,IAAA;cAAA,KACRtB,MAAM;gBAAAG,QAAA,CAAAE,IAAA;gBAAA;cAAA;cACNkB,oBAAW;cAAA,OAAApB,QAAA,CAAAqB,MAAA,WACJC,gCAAe,CAACC,eAAe,CAAC3B,GAAG,EAAEC,MAAM,EAAE,qBAAqB,EAAE,GAAG,CAAC;YAAA;cAAA,OAAAG,QAAA,CAAAqB,MAAA,WAExEC,gCAAe,CAACE,aAAa,CAAC5B,GAAG,EAAE,CAAC,CAAC,EAAE,iDAAiD,EAAE,GAAG,CAAC;YAAA;cAAAI,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAyB,EAAA,GAAAzB,QAAA;cAAA,OAAAA,QAAA,CAAAqB,MAAA,WAIlGC,gCAAe,CAACE,aAAa,CAAC5B,GAAG,EAAAI,QAAA,CAAAyB,EAAK,CAAC;YAAA;YAAA;cAAA,OAAAzB,QAAA,CAAA0B,IAAA;UAAA;QAAA,GAAAhC,OAAA;MAAA,CAGrD;MAAA,SAAAiC,OAAAC,EAAA,EAAAC,GAAA;QAAA,OAAAvC,OAAA,CAAAwC,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAJ,MAAA;IAAA;EAAA;EAAA,OAAA3C,2BAAA;AAAA;AAAA,IAAAgD,QAAA,GAAAC,OAAA,CAAA/C,OAAA,GAGU,IAAIF,2BAA2B,CAAC,CAAC"}