{"version":3,"file":"file-resize-controller.js","names":["_responseHandler","require","_sharp","_interopRequireDefault","_fs","_fileuploadModel","FileResizeController","_classCallCheck2","default","_createClass2","key","value","_create","_asyncToGenerator2","_regenerator","mark","_callee","req","res","requiredWidth","requiredHeight","imageFolderName","imagePath","image","metadata","aspectRatio","width","height","directoryPath","fileName","extension","nameWithoutExtension","newName","uploadPath","data","wrap","_callee$","_context","prev","next","body","Date","valueOf","concat","split","process","env","MONGODB_HOST","sharp","sent","Math","round","UPLOADS_PATH","fs","existsSync","mkdirSync","recursive","pop","substring","lastIndexOf","resize","fit","jpeg","quality","toFile","resized_image","updateFile","abrupt","responseHandler","successResponse","t0","console","log","errorResponse","stop","create","_x","_x2","apply","arguments","_default","exports","_ref","_callee2","actual","resized","result","_callee2$","_context2","File","findOneAndUpdate","file","$addToSet","_x3","_x4"],"sources":["../../../../../src/modules/v1/file-upload/controllers/file-resize-controller.js"],"sourcesContent":["import { responseHandler } from \"../../../../utils/response-handler\";\nimport sharp from 'sharp';\nimport fs from 'fs'\nimport { File } from \"../models/fileupload-model\";\n\nclass FileResizeController {\n\n    constructor() {\n    }\n\n    /**\n     * @description  API for File resize\n     * @param {*} req \n     * @param {*} res \n     */\n\n    async create(req, res) {\n\n        try {\n            const requiredWidth = req.body.width;\n            const requiredHeight = req.body.height;\n            const imageFolderName = new Date().valueOf();\n            const imagePath = `/var/www/html/${req.body.image.split(`${process.env.MONGODB_HOST}/`)[1]}`\n            const image = sharp(imagePath);\n\n            // get the image metadata to determine the image dimensions\n            const metadata = await image.metadata();\n\n            // calculate the aspect ratio of the original image\n            const aspectRatio = metadata.width / metadata.height;\n\n            // calculate the width and height of the resized image while maintaining the aspect ratio\n            const width = aspectRatio >= 1 ? requiredWidth : Math.round(requiredHeight * aspectRatio);\n            const height = aspectRatio >= 1 ? Math.round(requiredWidth / aspectRatio) : requiredHeight;\n\n            const directoryPath = `/var/www/html/${process.env.UPLOADS_PATH}/resized-images/${imageFolderName}`\n\n            if (!fs.existsSync(directoryPath)) {\n                fs.mkdirSync(directoryPath, { recursive: true });\n            }\n\n            const fileName = imagePath.split('/').pop();\n            const extension = fileName.split('.').pop();\n            const nameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n            const newName = `${nameWithoutExtension}(${requiredWidth}x${requiredHeight}).${extension}`;\n            const uploadPath = `${directoryPath}/${newName}`;\n            // resize and compress the image\n            await image.resize(width, height, { fit: 'inside' }).jpeg({ quality: 80 }).toFile(uploadPath);\n            const data = { resized_image: `http://${process.env.MONGODB_HOST}/${process.env.UPLOADS_PATH}/resized-images/${imageFolderName}/${newName}` }\n            await updateFile(req.body.image, data.resized_image)\n            return responseHandler.successResponse(res, data, 'Image resized successfully')\n\n        }\n\n        catch (err) {\n            console.log(err);\n            return responseHandler.errorResponse(res, err);\n        }\n\n    }\n}\n\n\nexport default new FileResizeController();\n\n\nconst updateFile = async (actual, resized) => {\n    try {\n        const result = await File.findOneAndUpdate({ file: actual }, { $addToSet: { resized_image: [resized] } });\n        return result;\n    } catch (error) {\n        throw error;\n    }\n};"],"mappings":"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"}