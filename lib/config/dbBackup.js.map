{"version":3,"file":"dbBackup.js","names":["_base","_interopRequireDefault","require","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","default","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","prototype","valueOf","call","e","path","cron","fs","fsPromises","promises","_require","spawn","dbBackup","exports","_BaseConfig","_inherits2","_super","_classCallCheck2","_createClass2","key","value","_dataBackup","_asyncToGenerator2","_regenerator","mark","_callee","_this","dbName","archivePath","wrap","_callee$","_context","prev","next","ENV","MONGODB_DB_NAME","join","existsSync","process","cwd","mkdir","schedule","console","log","MONGODB_HOST","MONGODB_PORT","MONGODB_USERNAME","MONGODB_PASSWORD","child","concat","stdout","on","data","stderr","Buffer","from","toString","error","code","signal","stop","dataBackup","BaseConfig"],"sources":["../../src/config/dbBackup.js"],"sourcesContent":["import BaseConfig from \"./base\";\nconst path = require('path');\nconst cron = require('node-cron');\nconst fs = require(\"fs\");\nconst fsPromises = require(\"fs\").promises;\nconst {\n  spawn\n} = require(\"child_process\");\n\n\nexport default class dbBackup extends BaseConfig {\n\n    constructor() {\n        super();\n    }\n\n    async dataBackup() {\n\n        const dbName = this.ENV.MONGODB_DB_NAME ;\n        const archivePath = path.join('dbBackUp');\n\n        // if Directory Not exist make Directory \n        if (!fs.existsSync(path.join(process.cwd(), \"dbBackUp\"))) {\n            await fsPromises.mkdir(path.join(process.cwd(), \"dbBackUp\"));\n          }\n\n        // Scheduling the backup  (using node-cron)\n        cron.schedule('0 0 * * *', () => {\n            console.log(\"start\")\n            // var cmd = 'mongodump --host ' + this.ENV.MONGODB_HOST + ' --port ' + this.ENV.MONGODB_PORT + ' --db ' + this.ENV.MONGODB_DB_NAME + ' --username ' + this.ENV.MONGODB_USERNAME + ' --password ' + this.ENV.MONGODB_PASSWORD + ' --out ' + '--archive=' + archivePath; // Command for mongodb dump process\n            console.log('mongodump --host ' + this.ENV.MONGODB_HOST + ' --port ' + this.ENV.MONGODB_PORT + ' --db ' + this.ENV.MONGODB_DB_NAME + ' --username ' + this.ENV.MONGODB_USERNAME + ' --password ' + this.ENV.MONGODB_PASSWORD + ' --out ' + '--archive=' + archivePath)\n            const child = spawn('mongodump', [\n                `--host=${this.ENV.MONGODB_HOST}`,\n                `--port=${this.ENV.MONGODB_PORT}`,\n                `--db=${this.ENV.MONGODB_DB_NAME}`,\n                `--username=${this.ENV.MONGODB_USERNAME}`,\n                `--password=${this.ENV.MONGODB_PASSWORD}`,\n                // '--out' ,\n                `--archive=${archivePath}`,\n                '--gzip',\n            ]);\n            \n            child.stdout.on('data', (data) => {\n                console.log('stdout:\\n', data);\n            });\n            child.stderr.on('data', (data) => {\n                console.log('stderr:\\n', Buffer.from(data).toString());\n            });\n            child.on('error', (error) => {\n                console.log('error:\\n', error);\n            });\n            child.on('exit', (code, signal) => {\n                if (code) console.log('Process exit with code:', code);\n                else if (signal) console.log('Process killed with signal:', signal);\n                else console.log('Database Backup successfully...');\n            });\n        });\n        \n    }\n}\n"],"mappings":"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"}