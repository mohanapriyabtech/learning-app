{"version":3,"sources":["components/AccessibleNavigationAnnouncer.js","App.js","serviceWorker.js","index.js","context/SidebarContext.js","components/ThemedSuspense.js"],"names":["AccessibleNavigationAnnouncer","_useState","useState","_useState2","_slicedToArray","message","setMessage","location","useLocation","useEffect","pathname","slice","setTimeout","concat","React","createElement","className","role","aria-live","aria-atomic","AdminLayout","lazy","MentorLayout","MentorLogin","CreateAccount","MentorCreateAccount","ForgotPassword","AdminLogin","MentorSignup","require","config","App","Fragment","Router","Switch","Route","path","component","Redirect","exact","from","to","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","SidebarProvider","Suspense","fallback","ThemedSuspense","Windmill","usePreferences","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","SidebarContext","createContext","_ref","children","isSidebarOpen","setIsSidebarOpen","toggleSidebar","closeSidebar","value","useMemo","Provider"],"mappings":"yhBAwBeA,MArBf,WACE,IAAAC,EAA8BC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAnCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GACpBI,EAAWC,wBAYjB,OAVAC,qBAAU,WAEJF,EAASG,SAASC,MAAM,GAE1BC,YAAW,kBAAMN,EAAW,gBAADO,OAAiBN,EAASG,SAASC,MAAM,GAAE,aAAW,KAEjFL,EAAW,MAEZ,CAACC,IAGFO,IAAAC,cAAA,QAAMC,UAAU,UAAUC,KAAK,SAASC,YAAU,SAASC,cAAY,QACpEd,ICbDe,GADSC,gBAAK,kBAAM,wDACNA,gBAAK,kBAAM,uEACzBC,EAAeD,gBAAK,kBAAM,wDAE1BE,GADQF,gBAAK,kBAAM,sEACLA,gBAAK,kBAAM,uEACzBG,EAAgBH,gBAAK,kBAAM,sEAC3BI,EAAsBJ,gBAAK,kBAAM,+DACjCK,EAAiBL,gBAAK,kBAAM,kCAC5BM,EAAaN,gBAAK,kBAAK,sEACvBO,EAAeP,gBAAK,kBAAK,+DAC9BQ,EAAQ,KAAUC,SAoCJC,MAlCf,WACE,OACEjB,IAAAC,cAAAD,IAAAkB,SAAA,KACElB,IAAAC,cAACkB,IAAM,KACLnB,IAAAC,cAACf,EAA6B,MAC9Bc,IAAAC,cAACmB,SAAM,KAGLpB,IAAAC,cAACoB,QAAK,CAACC,KAAK,wBAAwBC,UAAWb,IAC/CV,IAAAC,cAACoB,QAAK,CAACC,KAAK,yBAAyBC,UAAWZ,IAChDX,IAAAC,cAACoB,QAAK,CAACC,KAAK,mBAAmBC,UAAWX,IAE1CZ,IAAAC,cAACoB,QAAK,CAACC,KAAK,qBAAqBC,UAAWT,IAG5Cd,IAAAC,cAACoB,QAAK,CAACC,KAAK,aAAaC,UAAWjB,IACpCN,IAAAC,cAACoB,QAAK,CAACC,KAAK,cAAcC,UAAWf,IAIrCR,IAAAC,cAACoB,QAAK,CAACC,KAAK,0BAA0BC,UAAWd,IAGjDT,IAAAC,cAACoB,QAAK,CAACC,KAAK,yBAAyBC,UAAWV,IAGhDb,IAAAC,cAACuB,WAAQ,CAACC,OAAK,EAACC,KAAK,IAAIC,GAAG,+B,wBC/BhCC,EAAcC,QACW,cAA7BC,OAAOrC,SAASsC,UAEe,UAA7BD,OAAOrC,SAASsC,UAEhBD,OAAOrC,SAASsC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOlB,GAC9BmB,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKE/B,GAAUA,EAAOgC,UACnBhC,EAAOgC,SAAST,KAMlBO,QAAQC,IAAI,sCAGR/B,GAAUA,EAAOiC,WACnBjC,EAAOiC,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MClFjEC,IAASC,OACPrD,IAAAC,cAACqD,IAAe,KACdtD,IAAAC,cAACsD,WAAQ,CAACC,SAAUxD,IAAAC,cAACwD,IAAc,OACjCzD,IAAAC,cAACyD,WAAQ,CAACC,gBAAc,GACtB3D,IAAAC,cAACgB,EAAG,SAIV2C,SAASC,eAAe,SDAnB,SAAkB7C,GACvB,GAA6C,kBAAmBmB,UAAW,CAGzE,GADkB,IAAI2B,IAAIC,GAAwBjC,OAAOrC,SAASuE,MACpDC,SAAWnC,OAAOrC,SAASwE,OAIvC,OAGFnC,OAAOoC,iBAAiB,QAAQ,WAC9B,IAAMhC,EAAK,GAAAnC,OAAMgE,GAAsB,sBAEnCnC,IAgEV,SAAiCM,EAAOlB,GAEtCmD,MAAMjC,EAAO,CACXkC,QAAS,CAAE,iBAAkB,YAE5B9B,MAAK,SAAA+B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CtC,UAAUC,cAAcsC,MAAMpC,MAAK,SAAAC,GACjCA,EAAaoC,aAAarC,MAAK,WAC7BR,OAAOrC,SAASmF,eAKpB3C,EAAgBC,EAAOlB,MAG1BkC,OAAM,WACLJ,QAAQC,IACN,oEAvFA8B,CAAwB3C,EAAOlB,GAI/BmB,UAAUC,cAAcsC,MAAMpC,MAAK,WACjCQ,QAAQC,IACN,iHAMJd,EAAgBC,EAAOlB,OCtB/BoB,I,gICzBa0C,EAAiB9E,IAAM+E,gBAEvBzB,EAAkB,SAAH0B,GAAsB,IAAhBC,EAAQD,EAARC,SAChC9F,EAA0CC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAAlD+F,EAAa7F,EAAA,GAAE8F,EAAgB9F,EAAA,GAEtC,SAAS+F,IACPD,GAAkBD,GAGpB,SAASG,IACPF,GAAiB,GAGnB,IAAMG,EAAQC,mBACZ,iBAAO,CACLL,gBACAE,gBACAC,kBAEF,CAACH,IAGH,OAAOlF,IAAAC,cAAC6E,EAAeU,SAAQ,CAACF,MAAOA,GAAQL,K,gCCzBjD,oBAUexB,IARf,WACE,OACEzD,IAAAC,cAAA,OAAKC,UAAU,6FAA4F,iB","file":"static/js/main.6fad39a0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\n\nfunction AccessibleNavigationAnnouncer() {\n  const [message, setMessage] = useState('')\n  const location = useLocation()\n\n  useEffect(() => {\n    // ignore the /\n    if (location.pathname.slice(1)) {\n      // make sure navigation has occurred and screen reader is ready\n      setTimeout(() => setMessage(`Navigated to ${location.pathname.slice(1)} page.`), 500)\n    } else {\n      setMessage('')\n    }\n  }, [location])\n\n  return (\n    <span className=\"sr-only\" role=\"status\" aria-live=\"polite\" aria-atomic=\"true\">\n      {message}\n    </span>\n  )\n}\n\nexport default AccessibleNavigationAnnouncer\n","import React, { lazy } from 'react'\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\nimport AccessibleNavigationAnnouncer from './components/AccessibleNavigationAnnouncer'\n \n\nconst Layout = lazy(() => import('./containers/Layout'))\nconst AdminLayout = lazy(() => import('./containers/AdminLayout'))\nconst MentorLayout = lazy(() => import('./containers/MentorLayout'))\nconst Login = lazy(() => import('./pages/Login'))\nconst MentorLogin = lazy(() => import('./pages/Mentor/MentorLogin'))\nconst CreateAccount = lazy(() => import('./pages/CreateAccount'))\nconst MentorCreateAccount = lazy(() => import('./pages/Mentor/MentorSignup'))\nconst ForgotPassword = lazy(() => import('./pages/ForgotPassword'))\nconst AdminLogin = lazy(()=> import('./pages/Admin/AdminLogin'))\nconst MentorSignup = lazy(()=> import('./pages/Mentor/MentorSignup'))\n require('dotenv').config();\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <AccessibleNavigationAnnouncer />\n        <Switch>\n       \n          {/* <Route path=\"/login\" component={Login} /> */}\n          <Route path=\"/admin/create-account\" component={CreateAccount} />\n          <Route path=\"/mentor/create-account\" component={MentorCreateAccount} />\n          <Route path=\"/forgot-password\" component={ForgotPassword} />\n\n          <Route path=\"/app/mentor/signup\" component={MentorSignup} />\n          {/* Place new routes over this */}\n          {/* <Route path=\"/app\" component={Layout} /> */}\n          <Route path=\"/app/admin\" component={AdminLayout} />\n          <Route path=\"/app/mentor\" component={MentorLayout} />\n          {/* User Dashboard Route */}\n          {/* <Route path=\"/user/dashboard/login\" component={Login} /> */}\n\n          <Route path=\"/mentor/dashboard/login\" component={MentorLogin} />\n\n          {/* Admin Dashboard Route */}\n          <Route path=\"/admin/dashboard/login\" component={AdminLogin} />\n\n          {/* If you have an index page, you can remove this Redirect */}\n          <Redirect exact from=\"/\" to=\"/admin/dashboard/login\" />\n        \n        </Switch>\n      </Router>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport './assets/css/tailwind.output.css'\nimport App from './App'\nimport { SidebarProvider } from './context/SidebarContext'\nimport ThemedSuspense from './components/ThemedSuspense'\nimport { Windmill } from '@windmill/react-ui'\nimport * as serviceWorker from './serviceWorker'\n\n// if (process.env.NODE_ENV !== 'production') {\n//   const axe = require('react-axe')\n//   axe(React, ReactDOM, 1000)\n// }\n\nReactDOM.render(\n  <SidebarProvider>\n    <Suspense fallback={<ThemedSuspense />}>\n      <Windmill usePreferences>\n        <App />\n      </Windmill>\n    </Suspense>\n  </SidebarProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n","import React, { useState, useMemo } from 'react'\n\n// create context\nexport const SidebarContext = React.createContext()\n\nexport const SidebarProvider = ({ children }) => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false)\n\n  function toggleSidebar() {\n    setIsSidebarOpen(!isSidebarOpen)\n  }\n\n  function closeSidebar() {\n    setIsSidebarOpen(false)\n  }\n\n  const value = useMemo(\n    () => ({\n      isSidebarOpen,\n      toggleSidebar,\n      closeSidebar,\n    }),\n    [isSidebarOpen]\n  )\n\n  return <SidebarContext.Provider value={value}>{children}</SidebarContext.Provider>\n}\n","import React from 'react'\n\nfunction ThemedSuspense() {\n  return (\n    <div className=\"w-full h-screen p-6 text-lg font-medium text-gray-600 dark:text-gray-400 dark:bg-gray-900\">\n      Loading...\n    </div>\n  )\n}\n\nexport default ThemedSuspense\n"],"sourceRoot":""}